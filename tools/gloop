#!/usr/bin/python
# -*- coding: utf-8 -*-
#  Copyright (C) 2015 Yusuke Suzuki <yusuke.suzuki@sslab.ics.keio.ac.jp>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# gloop compiler driver, it preprocesses the code before passing it to nvcc.
# Mainly used to introduce our own lambda. That can be held, and stored as our gloop::function.

import argparse
import os
import subprocess
import sys
import tempfile

from clang.cindex import CursorKind
import clang.cindex
from colors import red, green, blue

class Processor(object):
    def __init__(self):
        pass

    def visit(self, node, parent):
        self.perform(node, parent)
        for child in node.get_children():
            self.visit(child, node)

    def perform(self, node, parent):
        print node

def runGloopCompiler(args, index):
    filename = args[index]
    del args[index]
    index = clang.cindex.Index.create()
    translationUnit = index.parse(filename, args)
    processor = Processor()
    processor.visit(translationUnit.cursor, None)
# clang -fsyntax-only -Xclang -load -Xclang out/tools/rewrite_lambda/rewrite_lambda.so -Xclang -plugin -Xclang rewrite-lambda -v tmp/t.cu

# Really simple extraction.
def extractTargetFile(args):
    for (i, arg) in enumerate(args):
        if arg.endswith('.cu'):
            return i
    return None

def main():
    args = sys.argv[:]
    args[0] = 'nvcc'
    index = extractTargetFile(args)
    if index is not None:
        print red("== [%d] %s" % (index, args[index]))
        # runGloopCompiler(args[:], index)
    return subprocess.call(args)

if __name__ == '__main__':
    sys.exit(main())
