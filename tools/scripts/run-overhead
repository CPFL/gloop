#!/usr/bin/ruby
# -*- coding: utf-8 -*-
#  Copyright (C) 2016 Yusuke Suzuki <yusuke.suzuki@sslab.ics.keio.ac.jp>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'open3'
require_relative './benchmark-data.rb'

class Result
    def initialize(name, data, status)
        @name = name
        @times = {
            "GPUInit" => 0,
            "DataInit" => 0,
            "IO" => 0,
            "Copy" => 0,
            "Kernel" => 0,
        }
        @data = data
        @status = status

        @times.each {|key, _|
            @times[key] = extractTime(key, data)
        }
    end

    def report
        if @status.success?
            @times.each {|key, value|
                puts "#{@name}:#{key}: #{value.to_s}"
            }
        else
            puts "#{@name}: INVALID"
        end
    end

    private
    def extractTime(type, data)
        m = /#{type} result:us\((\d+)\)/m.match(data)
        unless m
            puts @data
            raise self
        end
        m[1].to_i
    end
end

class Test
    def initialize(name, args)
        @name = name
        @args = args
    end

    def execute
        args = @args.collect {|arg| arg.gsub("\n", "") }
        result = runBenchmark(args)
        result.report()
    end

    def runBenchmark args
        out, err, status = Open3.capture3(args.join(" "))
        Result.new(@name, err, status)
    end
end

class CUDATest < Test
    def initialize(name, *args)
        super(name, args)
    end
end

class KernelSplitTest < Test
    def initialize(name, *args)
        super(name, args)
    end
end

class GLoopTest < Test
    def initialize(name, *args)
        super(name, args)
    end
end

$cudaTests = [
    CUDATest.new("tpacf", "release/src/samples/parboil2/tpacf/tpacf", "-i", BenchmarkData::TPACF::Data, "-o", "/home/yusukesuzuki/dev/parboil2-gloop/parboil/benchmarks/tpacf/run/large/tpacf.out", "--", "-n", "100", "-p", "10391"),
    CUDATest.new("tpacf-optimized", "release/src/samples/parboil2/tpacf-non-shared/tpacf-non-shared", "-i", BenchmarkData::TPACF::Data, "-o", "/home/yusukesuzuki/dev/parboil2-gloop/parboil/benchmarks/tpacf/run/large/tpacf.out", "--", "-n", "100", "-p", "10391"),
#     CUDATest.new("hybridsort", "release/src/samples/rodinia/cuda/hybridsort/hybridsort", "r"),
    # CUDATest.new("hybridsort-host", "release/src/samples/rodinia/cuda/hybridsort-host/hybridsort-host", "r"),
    CUDATest.new("lavaMD", "release/src/samples/rodinia/cuda/lavaMD/lavaMD", "-boxes1d 50"),
    CUDATest.new("mummergpu", "release/src/samples/rodinia/cuda/mummergpu/mummergpu", "/home/yusukesuzuki/dev/rodinia/data/mummergpu/NC_003997.fna", "/home/yusukesuzuki/dev/rodinia/data/mummergpu/NC_003997_q100bp.fna"),
]

$kernelSplitTests = [
    KernelSplitTest.new("tpacf-kernel", "release/src/samples/parboil2/tpacf-kernel/tpacf-kernel", "-i", BenchmarkData::TPACF::Data, "-o", "/home/yusukesuzuki/dev/parboil2-gloop/parboil/benchmarks/tpacf/run/large/tpacf.out", "--", "-n", "100", "-p", "10391"),
    KernelSplitTest.new("hybridsort-kernel", "release/src/samples/rodinia/kernel/hybridsort/hybridsort-kernel", "r"),
    # KernelSplitTest.new("hybridsort-host-kernel", "release/src/samples/rodinia/kernel/hybridsort-host/hybridsort-host-kernel", "r"),
    KernelSplitTest.new("mummergpu-kernel", "release/src/samples/rodinia/kernel/mummergpu/mummergpu-kernel", "/home/yusukesuzuki/dev/rodinia/data/mummergpu/NC_003997.fna", "/home/yusukesuzuki/dev/rodinia/data/mummergpu/NC_003997_q100bp.fna"),
    KernelSplitTest.new("throttle-kernel", "release/src/samples/launch/launch", "1000000", "1", "1", "1", "1"),
    # KernelSplitTest.new("throttle-async-kernel", "release/src/samples/launch-async/launch-async", "1000000", "1", "1", "1", "1"),
]

$gloopTests = [
    GLoopTest.new("tpacf-gloop", "release/src/samples/parboil2/tpacf-gloop/tpacf-gloop", "-i", BenchmarkData::TPACF::Data, "-o", "/home/yusukesuzuki/dev/parboil2-gloop/parboil/benchmarks/tpacf/run/large/tpacf.out", "--", "-n", "100", "-p", "10391"),
    GLoopTest.new("hybridsort-gloop", "release/src/samples/rodinia/gloop/hybridsort/hybridsort-gloop", "r"),
    # GLoopTest.new("hybridsort-host-gloop", "release/src/samples/rodinia/gloop/hybridsort-host/hybridsort-host-gloop", "r"),
    GLoopTest.new("lavaMD-gloop", "release/src/samples/rodinia/gloop/lavaMD/lavaMD-gloop", "-boxes1d 50"),
    GLoopTest.new("mummergpu-gloop", "release/src/samples/rodinia/gloop/mummergpu/mummergpu-gloop", "/home/yusukesuzuki/dev/rodinia/data/mummergpu/NC_003997.fna", "/home/yusukesuzuki/dev/rodinia/data/mummergpu/NC_003997_q100bp.fna"),
    GLoopTest.new("throttle-gloop", "release/src/samples/throttle-statistics/throttle-statistics", "1000000", "1", "1", "1", "1"),
]

$gloopNonSharedTests = [
    GLoopTest.new("tpacf-gloop-without-shared-slots", "nonshared/src/samples/parboil2/tpacf-gloop/tpacf-gloop", "-i", BenchmarkData::TPACF::Data, "-o", "/home/yusukesuzuki/dev/parboil2-gloop/parboil/benchmarks/tpacf/run/large/tpacf.out", "--", "-n", "100", "-p", "10391"),
    GLoopTest.new("hybridsort-gloop-without-shared-slots", "nonshared/src/samples/rodinia/gloop/hybridsort/hybridsort-gloop", "r"),
#     GLoopTest.new("hybridsort-host-gloop-without-shared-slots", "nonshared/src/samples/rodinia/gloop/hybridsort-host/hybridsort-host-gloop", "r"),
    GLoopTest.new("lavaMD-gloop-without-shared-slots", "nonshared/src/samples/rodinia/gloop/lavaMD/lavaMD-gloop", "-boxes1d 50"),
    GLoopTest.new("mummergpu-gloop-without-shared-slots", "nonshared/src/samples/rodinia/gloop/mummergpu/mummergpu-gloop", "/home/yusukesuzuki/dev/rodinia/data/mummergpu/NC_003997.fna", "/home/yusukesuzuki/dev/rodinia/data/mummergpu/NC_003997_q100bp.fna"),
    GLoopTest.new("throttle-gloop-without-shared-slots", "nonshared/src/samples/throttle-statistics/throttle-statistics", "1000000", "1", "1", "1", "1"),
]

def main
    11.times do
        $cudaTests.each {|test|
            test.execute
        }

        $kernelSplitTests.each {|test|
            test.execute
        }

        $gloopTests.each {|test|
            test.execute
        }

        $gloopNonSharedTests.each {|test|
            test.execute
        }
    end
end

main() if __FILE__ == $0
