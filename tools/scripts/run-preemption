#!/usr/bin/ruby
# -*- coding: utf-8 -*-
#  Copyright (C) 2016 Yusuke Suzuki <yusuke.suzuki@sslab.ics.keio.ac.jp>
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
#  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'open3'
require 'fileutils'
require_relative './gloop.rb'
require_relative './benchmark-data.rb'

class Result
    def initialize(name)
        @name = name
    end
end

class BenchmarkResult < Result
    def initialize(name, data)
        super(name)
        @time = extractTime(data)
    end

    def report
        puts "#{@name}: #{@time.to_s}"
    end

    private
    def extractTime(data)
        m = /result:us\((\d+)\)/m.match(data)
        raise self unless m
        m[1].to_i
    end
end

class StatisticsResult < Result
    def initialize(name, data)
        super(name)
        @name = name
        @times = {
            "GPUInit" => 0,
            "DataInit" => 0,
            "IO" => 0,
            "Copy" => 0,
            "Kernel" => 0,
        }

        @times.each {|key, _|
            @times[key] = extractTime(key, data)
        }
    end

    def reportSum
        result = 0
        @times.each {|key, value|
            result += value
        }
        puts "#{@name}: #{result.to_s}"
    end

    def reportEach
        @times.each {|key, value|
            puts "#{@name}: #{key}: #{value.to_s}"
        }
    end

    def reportKernel
        puts "#{@name}: Kernel: #{@times["Kernel"].to_s}"
    end

    def report
        reportKernel
    end

    private
    def extractTime(type, data)
        m = /#{type} result:us\((\d+)\)/m.match(data)
        raise self unless m
        m[1].to_i
    end
end

class Test
    def initialize(name, times)
        @name = name
        @times = times
    end

    def execute
        results = runBenchmark()
        results.each {|result|
            result.report()
        }
    end
end

class GrepTextTest < Test
    def createCommand i
        %W(#{GLoop::Root}/release/src/samples/grep_text/grep_text_gloop 1 40 40 128 input/dict.gpu out#{i} db_shakespere.txt)
    end

    def runBenchmark
        results = []
        FileUtils.chdir("#{GLoop::Root}/data") {|dir|
            threads = []
            @times.times {|i|
                threads << Thread.new {
                    Thread.pass
                    out, err, status = Open3.capture3(createCommand(i).join(" "))
                    FileUtils.rm "out#{i}" if File.exists? "out#{i}"
                    results[i] = BenchmarkResult.new(@name + i.to_s, err)
                }
            }

            threads.each {|thread|
                thread.join
            }
        }
        results
    end
end

class TPACFTest < Test
    def createCommand i
        ["#{GLoop::Root}/release/src/samples/parboil2/tpacf-gloop/tpacf-gloop", "-i", BenchmarkData::TPACF::Data, "-o", "out#{i}", "--", "-n", "100", "-p", "10391"]
    end

    def runBenchmark
        results = []
        FileUtils.chdir("#{GLoop::Root}/data") {|dir|
            threads = []
            @times.times {|i|
                threads << Thread.new {
                    Thread.pass
                    out, err, status = Open3.capture3(createCommand(i).join(" "))
                    FileUtils.rm "out#{i}" if File.exists? "out#{i}"
                    results[i] = StatisticsResult.new(@name + i.to_s, err)
                }
            }

            threads.each {|thread|
                thread.join
            }
        }
        results
    end
end

class TPACFCUDATest < Test
    def createCommand i
        ["#{GLoop::Root}/release/src/samples/parboil2/tpacf/tpacf", "-i", BenchmarkData::TPACF::Data, "-o", "out#{i}", "--", "-n", "100", "-p", "10391"]
    end

    def runBenchmark
        results = []
        FileUtils.chdir("#{GLoop::Root}/data") {|dir|
            threads = []
            @times.times {|i|
                threads << Thread.new {
                    Thread.pass
                    out, err, status = Open3.capture3(createCommand(i).join(" "))
                    FileUtils.rm "out#{i}" if File.exists? "out#{i}"
                    results[i] = StatisticsResult.new(@name + i.to_s, err)
                }
            }

            threads.each {|thread|
                thread.join
            }
        }
        results
    end
end



class HybridsortTest < Test
    def createCommand i
        ["#{GLoop::Root}/debug/src/samples/rodinia/gloop/hybridsort/hybridsort-gloop", "r", ">", "out#{i}"]
    end

    def runBenchmark
        results = []
        FileUtils.chdir("#{GLoop::Root}/data") {|dir|
            threads = []
            @times.times {|i|
                threads << Thread.new {
                    Thread.pass
                    out, err, status = Open3.capture3(createCommand(i).join(" "))
                    FileUtils.rm "out#{i}" if File.exists? "out#{i}"
                    results[i] = StatisticsResult.new(@name + i.to_s, err)
                }
            }

            threads.each {|thread|
                thread.join
            }
        }
        results
    end
end

class ThrottleTest < Test
    def initialize(name, times, nthreads = 1, nblocks = 1)
        super(name, times)
        @nthreads = nthreads
        @nblocks = nblocks
    end

    def createCommand i
        ["#{GLoop::Root}/release/src/samples/throttle-statistics/throttle-statistics", "1000000", @nblocks.to_s, "240", @nthreads.to_s, "1"]
    end

    def runBenchmark
        results = []
        FileUtils.chdir("#{GLoop::Root}/data") {|dir|
            threads = []
            @times.times {|i|
                threads << Thread.new {
                    Thread.pass
                    out, err, status = Open3.capture3(createCommand(i).join(" "))
                    FileUtils.rm "out#{i}" if File.exists? "out#{i}"
                    results[i] = StatisticsResult.new(@name + i.to_s, err)
                }
            }

            threads.each {|thread|
                thread.join
            }
        }
        results
    end
end

class LavaMDTest < Test
    def createCommand i
        [ "#{GLoop::Root}/release/src/samples/rodinia/gloop/lavaMD/lavaMD-gloop", "-boxes1d", "50" ]
    end

    def runBenchmark
        results = []
        FileUtils.chdir("#{GLoop::Root}/data") {|dir|
            threads = []
            @times.times {|i|
                threads << Thread.new {
                    Thread.pass
                    out, err, status = Open3.capture3(createCommand(i).join(" "))
                    results[i] = StatisticsResult.new(@name + i.to_s, err)
                }
            }

            threads.each {|thread|
                thread.join
            }
        }
        results
    end
end

class LavaMDCUDATest < Test
    def createCommand i
        [ "#{GLoop::Root}/release/src/samples/rodinia/cuda/lavaMD/lavaMD", "-boxes1d", "50" ]
    end

    def runBenchmark
        results = []
        FileUtils.chdir("#{GLoop::Root}/data") {|dir|
            threads = []
            @times.times {|i|
                threads << Thread.new {
                    Thread.pass
                    out, err, status = Open3.capture3(createCommand(i).join(" "))
                    results[i] = StatisticsResult.new(@name + i.to_s, err)
                }
            }

            threads.each {|thread|
                thread.join
            }
        }
        results
    end
end

$tests = [
    # GrepTextTest.new("grep_text1", 1),
    # GrepTextTest.new("grep_text2", 2),
    # GrepTextTest.new("grep_text4", 4),
    # GrepTextTest.new("grep_text8", 8),

    # LavaMDCUDATest.new("lavaMD-cuda1", 1),
    # LavaMDTest.new("lavaMD-gloop1", 1),
    # LavaMDCUDATest.new("lavaMD-cuda2", 2),
    # LavaMDTest.new("lavaMD-gloop2", 2),
    # LavaMDCUDATest.new("lavaMD-cuda3", 3),
    # LavaMDTest.new("lavaMD-gloop3", 3),
    # LavaMDCUDATest.new("lavaMD-cuda4", 4),
    # LavaMDTest.new("lavaMD-gloop4", 4),
    # LavaMDCUDATest.new("lavaMD-cuda5", 5),
    # LavaMDTest.new("lavaMD-gloop5", 5),
    # LavaMDCUDATest.new("lavaMD-cuda6", 6),
    # LavaMDTest.new("lavaMD-gloop6", 6),

    TPACFCUDATest.new("tpacf-cuda1", 1),
    TPACFTest.new("tpacf-gloop1", 1),
    TPACFCUDATest.new("tpacf-cuda2", 2),
    TPACFTest.new("tpacf-gloop2", 2),
    TPACFCUDATest.new("tpacf-cuda3", 3),
    TPACFTest.new("tpacf-gloop3", 3),
    TPACFCUDATest.new("tpacf-cuda4", 4),
    TPACFTest.new("tpacf-gloop4", 4),
    TPACFCUDATest.new("tpacf-cuda5", 5),
    TPACFTest.new("tpacf-gloop5", 5),
    TPACFCUDATest.new("tpacf-cuda6", 6),
    TPACFTest.new("tpacf-gloop6", 6),
]

# [1, 240, 480, 960, 1920, 3840, 7680].each {|nblocks|
#     [1, 2, 4, 8].each {|instances|
#         $tests.push(ThrottleTest.new("throttle#{instances}-#{nblocks}", instances, 1, nblocks))
#     }
# }

def main
    11.times do
        $tests.each {|test|
            test.execute
        }
    end
end

main() if __FILE__ == $0
